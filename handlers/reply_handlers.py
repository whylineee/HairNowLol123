import json
import os

from aiogram import types, Router
from aiogram.types import FSInputFile

from keyboards.inline_keyboards import get_inline_hs
from keyboards.reply_keyboards import get_quiz_keyboard, get_main_keyboard, get_searchion_keyboard, \
    get_workstation_keyboard, get_workstation_menu_keyboard
from aiogram.fsm.context import FSMContext

from states.change_skills_py import ChangeSkills
from states.company_states.who_search_py import WhoSearch
from states.edit_user_states import EditDescUser
from states.search_states import SearchEmployee
from states.enter_location import EnterLocations
from states.describe_experience import DescribeExperience
from states.company_states.name_company import NameCompany
from states.company_states.describe_vacancy import DesVacancy
from states.company_states.search_company import SearchCompany
from states.company_states.company_locations import LocationsCompany
from states.company_states.salary_comp import SalaryComp
from states.upload_media_states import UploadMediaStates
from states.delete_ancets import DelEmployee

from utils.users import get_employee_text, get_company_text

router = Router()


@router.message(lambda message: message.text == "üéÆ–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def test_handler(message: types.Message):
    await message.answer("""–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é""", reply_markup=get_searchion_keyboard())


@router.message(lambda message: message.text == "–ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def test_handler(message: types.Message):
    await message.answer("""1. –ú–æ—è –∞–Ω–∫–µ—Ç–∞""", reply_markup=get_searchion_keyboard())


@router.message(lambda message: message.text == "üïê–ú–æ—è –≤–∞–∫–∞–Ω—Å—ñ—èüïê")
async def test_handler(message: types.Message):
    await message.answer("""–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å—ñ—è""", reply_markup=get_workstation_menu_keyboard())


@router.message(lambda message: message.text == "–ü—Ä–æ –Ω–∞—Å")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–∏–≤ : whylineee
    –ü–Ü–ë: –°–∞–≤–∏–Ω –ú–∞—Ä–∫–æ –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á""", reply_markup=get_main_keyboard())


@router.message(lambda message: message.text == "üì°–ê–Ω–∫–µ—Ç–∞üì°")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞""", reply_markup=get_quiz_keyboard())


@router.message(lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é""", reply_markup=get_main_keyboard())


@router.message(lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üíª")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é""", reply_markup=get_workstation_keyboard())


@router.message(lambda message: message.text == "‚úèÔ∏è–ü—Ä–æ –Ω–∞—Å‚úèÔ∏è")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–∏–≤ : whylineee
    –ü–Ü–ë: –°–∞–≤–∏–Ω –ú–∞—Ä–∫–æ –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á""", reply_markup=get_searchion_keyboard())


@router.message(lambda message: message.text == "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–∞—à–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É,
–Ω–∞–ø–∏—à–∏ —Å—é–¥–∏ (jpg_junior) —ñ —Ç–æ–±—ñ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
–î—è–∫—É—é –∑–∞ —Ç–µ —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—à—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.""", reply_markup=get_main_keyboard())


@router.message(lambda message: message.text == "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7üì≤")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–∞—à–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É,
–Ω–∞–ø–∏—à–∏ —Å—é–¥–∏ (whylineee) —ñ —Ç–æ–±—ñ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
–î—è–∫—É—é –∑–∞ —Ç–µ —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—à—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.""", reply_markup=get_searchion_keyboard())


@router.message(lambda message: message.text == "üìä–ü–æ–º—ñ–Ω—è—Ç–∏ —Ç–µ–∫—Å—Çüìä")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç""")
    await state.set_state(EditDescUser.edit_e_desc)


@router.message(lambda message: message.text == "üë∑‚Äç‚ôÇÔ∏è–®—É–∫–∞—Ç–∏ —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤üë∑‚Äç‚ôÇÔ∏è")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await state.set_state(SearchEmployee.query)
    await message.answer("""–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∞–Ω–∫–µ—Ç–∏:""")
    with open("data/employee.json", "r") as f:
        employee = json.load(f)
    for employee in employee:
        text = get_employee_text(employee)
        if employee["profile_img"] is not None:
            photo_file = FSInputFile(employee["profile_img"])
            await message.answer_photo(photo=photo_file, caption=text, reply_markup=get_workstation_keyboard())
        else:
            await message.answer(text, reply_markup=get_workstation_keyboard())


@router.message(lambda message: message.text == "ü§ñ–ü—Ä–æ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –±–æ—Ç–∞ü§ñ")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –Ω–∞–π–Ω–æ–≤—ñ—à–∞ –≤–µ—Ä—Å—ñ—è –±–æ—Ç–∞!""", reply_markup=get_searchion_keyboard())


@router.message(lambda message: message.text == "ü§ñ–ü—Ä–æ –Ω–æ–≤—É –≤–µ—Ä—Å—ñ—é –±–æ—Ç–∞ü§ñ")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤—ñ—Ç, —Ü–µ –Ω–∞–π–Ω–æ–≤—ñ—à–∞ –≤–µ—Ä—Å—ñ—è –±–æ—Ç–∞!""", reply_markup=get_searchion_keyboard())


@router.message(lambda message: message.text == "üòé–ó–∞–ø—Ä–æ—Å–∏ –¥—Ä—É–∑—ñ–≤ ‚Äì –æ—Ç—Ä–∏–º–∞–π –±—ñ–ª—å—à–µ –ª–∞–π–∫—ñ–≤ üòé")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–æ—Å—å —Ç–≤—ñ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∏–π –∫–æ–¥""", reply_markup=get_searchion_keyboard())


@router.message(lambda message: message.text == "üÜô–í–∏–±—Ä–∞—Ç–∏ –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó/–ù–∞–≤–∏—á–∫–∏üÜô")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–ø–∏—à—ñ—Ç—å –≤–∞—à—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó""", )
    await state.set_state(ChangeSkills.change_e_skills)


@router.message(lambda message: message.text == "üíª–û–ø–∏—Å–∞—Ç–∏ —Å–≤—ñ–π –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –≤ ITüíª")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–û–ø–∏—à—ñ—Ç—å –≤–∞—à –¥–æ—Å–≤—ñ–¥:""", )
    await state.set_state(DescribeExperience.describe_e_experience)


@router.message(lambda message: message.text == "üìç–í–≤–µ—Å—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é —Ä–æ–±–æ—Ç–∏üìç")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é:""", )
    await state.set_state(EnterLocations.enter_e_locations)


@router.message(lambda message: message.text == "üè¢–ú—ñ–π –∫–∞–±—ñ–Ω–µ—Çüè¢" or message.text == "üîπÔ∏èÔ∏èÔ∏èÔ∏èÔ∏èÔ∏è–ü–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ä–æ–ª—å")
async def cabinet_handler(message: types.Message):
    await message.answer("""–í–∏–±–µ—Ä–∏ —Ö—Ç–æ —Ç–∏, –†–æ–±–æ—Ç–æ–¥–∞–≤–µ—Ü—å —á–∏ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫?""", reply_markup=get_inline_hs())


@router.message(lambda message: message.text == "üóÑ–ù–∞–∑–≤–∞ –ö–æ–º–ø–∞–Ω—ñ—óüóÑ")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –∫–æ–º–ø–∞–Ω—ñ—ó:""", )
    await state.set_state(NameCompany.name_c_company)


@router.message(lambda message: message.text == "üì•–û–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—óüì•")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó:""", )
    await state.set_state(DesVacancy.des_c_vacancy)


@router.message(lambda message: message.text == "üîé–ö–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µüîç")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–ö–æ–≥–æ –≤–∏ —à—É–∫–∞—î—Ç–µ:""", )
    await state.set_state(WhoSearch.who_c_search)


@router.message(lambda message: message.text == "üîé–®—É–∫–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—óüëÅ")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await state.set_state(SearchCompany.company)
    await message.answer("""–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó:""")
    with open("data/company.json", "r") as f:
        company = json.load(f)
    for company in company:
        text = get_company_text(company)
        await message.answer(text, reply_markup=get_main_keyboard())


@router.message(lambda message: message.text == "üìç–õ–æ–∫–∞—Ü—ñ—è –∫–æ–º–ø–∞–Ω—ñ—óüöâ")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é –∫–æ–º–ø–∞–Ω—ñ—ó:""", )
    await state.set_state(LocationsCompany.loc_c_company)


@router.message(lambda message: message.text == "üí≤–ó–∞—Ä–ø–ª–∞—Ç–Ω–∏–π –¥—ñ–ø–∞–∑–æ–Ωüí≤")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –∑–∞—Ä–ø–ª–∞—Ç–Ω–∏–π –¥—ñ–∞–ø–∞–∑–æ–Ω:""", )
    await state.set_state(SalaryComp.salary_comp)


@router.message(lambda message: message.text == "üì∏–ü–æ–º—ñ–Ω—è—Ç–∏ —Ñ–æ—Ç–æüì∏")
async def media_handler(message: types.Message, state: FSMContext):
    await state.set_state(UploadMediaStates.wait_for_photo)
    await message.answer("Please sent photo:")


@router.message(lambda message: message.text == "‚ùå–í–∏–¥–∞–ª–∏—Ç–∏ –∞–Ω–∫–µ—Ç—É‚ùå")
async def del_employee(message: types.Message, state: FSMContext):
    file_path = "data/employee.json"

    if not os.path.exists(file_path):
        await message.answer("‚ö†Ô∏è –§–∞–π–ª employee.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            employees = json.load(f)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        return

    user_id = str(message.from_user.id)
    found = False

    updated_employees = []
    for emp in employees:
        emp_id = str(emp.get("id"))  # <-- –ó–º—ñ–Ω–∏–≤ —Ç—É—Ç
        if emp_id != user_id:
            updated_employees.append(emp)
        else:
            found = True

    if found:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(updated_employees, f, ensure_ascii=False, indent=4)

        await message.answer("‚úÖ –í–∞—à—É –∞–Ω–∫–µ—Ç—É –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∏ –∑ –≤–∞—à–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")






@router.message(lambda message: message.text == "üóë–í–∏–¥–∞–ª–∏—Ç–∏ –∞–Ω–∫–µ—Ç—Éüóë")
async def del_company(message: types.Message, state: FSMContext):
    file_path = "data/company.json"  # –ó–∞–º—ñ–Ω–∞ —à–ª—è—Ö—É –¥–æ —Ñ–∞–π–ª—É

    if not os.path.exists(file_path):
        await message.answer("‚ö†Ô∏è –§–∞–π–ª company.json –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    try:
        with open(file_path, "r", encoding="utf-8") as f:
            companies = json.load(f)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—á–∏—Ç—É–≤–∞–Ω–Ω—ñ —Ñ–∞–π–ª—É: {e}")
        return

    user_id = str(message.from_user.id)
    found = False

    updated_companies = []
    for comp in companies:
        comp_id = str(comp.get("id"))  # <-- –¢—É—Ç –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
        if comp_id != user_id:
            updated_companies.append(comp)
        else:
            found = True

    if found:
        with open(file_path, "w", encoding="utf-8") as f:
            json.dump(updated_companies, f, ensure_ascii=False, indent=4)

        await message.answer("‚úÖ –í–∞—à—É –∞–Ω–∫–µ—Ç—É –∫–æ–º–ø–∞–Ω—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer("‚ö†Ô∏è –ê–Ω–∫–µ—Ç–∏ –∫–æ–º–ø–∞–Ω—ñ—ó –∑ –≤–∞—à–∏–º ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
