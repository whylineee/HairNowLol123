import json

from aiogram import types, Router
from keyboards.reply_keyboards import get_quiz_keyboard, get_main_keyboard, get_searchion_keyboard, \
    get_workstation_keyboard, get_workstation_menu_keyboard
from aiogram.fsm.context import FSMContext

from states.edit_user_states import EditDescUser
from states.search_state import SearchEmployee

router = Router()


@router.message(lambda message: message.text == "üéÆ–ú–µ–Ω—éüéÆ")
async def test_handler(message: types.Message):
    await message.answer("""–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é""", reply_markup=get_searchion_keyboard())

@router.message(lambda message: message.text == "–ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def test_handler(message: types.Message):
    await message.answer("""1. –ú–æ—è –∞–Ω–∫–µ—Ç–∞""", reply_markup=get_searchion_keyboard())

@router.message(lambda message: message.text == "–ú–æ—è –≤–∞–∫–∞–Ω—Å—ñ—è")
async def test_handler(message: types.Message):
    await message.answer("""–í–∞—à–∞ –≤–∞–∫–∞–Ω—Å—ñ—è""", reply_markup=get_workstation_menu_keyboard())

@router.message(lambda message: message.text == "–ü—Ä–æ –Ω–∞—Å")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–∏–≤ : whylineee
    –ü–Ü–ë: –°–∞–≤–∏–Ω –ú–∞—Ä–∫–æ –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á""", reply_markup=get_main_keyboard())

@router.message(lambda message: message.text == "üì°–ê–Ω–∫–µ—Ç–∞üì°")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞""", reply_markup=get_quiz_keyboard())

@router.message(lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é""", reply_markup=get_main_keyboard())


@router.message(lambda message: message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üíª")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é""", reply_markup=get_workstation_keyboard())

@router.message(lambda message: message.text == "–ü—Ä–æ –Ω–∞—Å‚úèÔ∏è")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–¶–µ–π –±–æ—Ç —Å—Ç–≤–æ—Ä–∏–≤ : whylineee
    –ü–Ü–ë: –°–∞–≤–∏–Ω –ú–∞—Ä–∫–æ –ê–Ω–¥—Ä—ñ–π–æ–≤–∏—á""", reply_markup=get_workstation_keyboard())


@router.message(lambda message: message.text == "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–∞—à–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É,
–Ω–∞–ø–∏—à–∏ —Å—é–¥–∏ (jpg_junior) —ñ —Ç–æ–±—ñ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
–î—è–∫—É—é –∑–∞ —Ç–µ —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—à—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.""", reply_markup=get_main_keyboard())

@router.message(lambda message: message.text == "–ü—ñ–¥—Ç—Ä–∏–º–∫–∞ 24/7üì≤")
async def questionnaire_handler(message: types.Message):
    await message.answer("""–ü—Ä–∏–≤—ñ—Ç, —Ü–µ —Ü—ñ–ª–æ–¥–æ–±–æ–≤–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–∞—à–æ–≥–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç—É,
–Ω–∞–ø–∏—à–∏ —Å—é–¥–∏ (jpg_junior) —ñ —Ç–æ–±—ñ –¥–∞–¥—É—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
–î—è–∫—É—é –∑–∞ —Ç–µ —â–æ –∫–æ—Ä–∏—Å—Ç—É—î—à—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º.""", reply_markup=get_workstation_keyboard())

@router.message(lambda message: message.text == "2. –ü–æ–º—ñ–Ω—è—Ç–∏ —Ç–µ–∫—Å—Ç")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await message.answer("""–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç""")
    await state.set_state(EditDescUser.edit_e_desc)

@router.message(lambda message: message.text == "–®—É–∫–∞—Ç–∏ —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤")
async def questionnaire_handler(message: types.Message, state: FSMContext):
    await state.set_state(SearchEmployee.query)
    await message.answer("""–û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∞–Ω–∫–µ—Ç–∏:""")
    with open("data/employee.json", "r") as f:
        employee = json.load(f)
    for employee in employee:
        await message.answer(f"{employee['employee']}", reply_markup=get_workstation_keyboard)


